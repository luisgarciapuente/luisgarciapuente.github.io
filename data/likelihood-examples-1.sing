LIB "~/likelihood/maxlike.lib";

// 1. 
// First we create the ring we will be working with
ring r = 0,(x,y),dp;

// Now we input the polynomial parametrization of the distribution 
poly f1,f2,f3 = 7x+13y+23, -5x+7y-8, 2x-11y-4;
poly f4 = 1-f1-f2-f3;

// or

poly f1,f2,f3 = 7x+13y2+23, -5x+7y+8, 2x2-11y+4;
poly f4 = 100-f1-f2-f3;

// or

poly f1,f2,f3 = 7x2+9xy+13y2+23, -5x2+29xy+7y2+8, 21x2+8xy-11y2+4;
poly f4 = 1000-f1-f2-f3;

// We consider these polynomials as an ideal
ideal I = f1,f2,f3,f4;

// We define the data set as an integer vector
intvec u = 11,23,31,17;

// critical is a function that computes the critical ideal
ideal J = critical(I,u);

// Info returns two values (codimension, degree)
Info(J);

// The function MLeval has 4 parameters (the last one is optional).
// The ideal I corresponding to the polynomial parametrization,
// the critical ideal J, the data u, and
// an optional parameter(s) corresponding to the options
// for the "solve" command. In this example, the last option
// stands for the precision of output in digits, which is 15.
 
// MLeval returns a SORTED list whose entries are triplets of the form
// (a,b,c) where a is a root of the critical ideal, 
// b is the evaluation of the distribution at the MLE a
// that is b = (f1(a),f2(a),f3(a),f4(a)),
// c is the value of the ML at a, i.e., c = \prod_i f_i^{u_i}
// Note: MLeval changes the ambient ring to a new ring called rC
MLeval(I,J,u,15);

// We can check the list of all root of J with the following command
setring r;
Lroots(J);

// We can check the list of all real roots of J
setring r;
Lrealroots(J);

// We can also go directly to the MLE computation
// from the ideal I and the data u, as shown in
//the next example

// 2. 

ring r = 0,(x,y),dp;
poly f1,f2 = 7x+13y+23, -5x+7y-8;
ideal I = f1,f2,1-f1-f2;
intvec u = 11,23,31;

// Since the critical ideal is 0 dimensional we can do all 
// the steps in the algorithm at once with the command
// MLE which takes as an input the ideal corresponding to
// the  polynomial parametrization and the data set
// (and an optional parameter(s) just as in MLeval.
// The output consists of a list with two elements
// the first element is equal to the outpot of MLeval.
// The second element is the ML degree.
MLE(I,u);

// 3. Serkan's example

ring r = 0,(x),dp;
ideal I = x2, 2x*(1-x), (1-x)^2;
intvec u = 2,1,0;
MLE(I,u,10);
 
// 4. Bernd's first example
// The important part of this example is that
// the critical ideal is not 0-dimensional
// so we cannot use the command MLE directly.
// First, we need to saturate the critical ideal
// as explained in [khetan-Sturmfels] 
ring r = 0,(p,s,t),dp;
poly f1 = p*(1-s)^4 + (1-p)*(1-t)^4;
poly f2 = 4*p*s*(1-s)^3 + 4*(1-p)*t*(1-t)^3;
poly f3 = 6*p*s^2*(1-s)^2 + 6*(1-p)*t^2*(1-t)^2;
poly f4 = 4*p*s^3*(1-s) + 4*(1-p)*t^3*(1-t);
poly f5 = p*s^4 + (1-p)*t^4;
ideal I = f1,f2,f3,f4,f5;
intvec u = 3,5,7,11,13;
ideal J = critical(I,u);
J = sat(J,s-t)[1];
J = sat(J,p)[1];
J = sat(J,p-1)[1];
Info(J);
list l = MLeval(I,J,u,15);

// There are some more things to work on
// 1. Automatize the saturation process

// 2. Distinguish between maxima and minima 

